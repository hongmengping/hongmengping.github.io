<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6之Promise</title>
      <link href="/2020/02/03/es6-zhi-promise/"/>
      <url>/2020/02/03/es6-zhi-promise/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之异步处理 -- 【回顾】事件循环</title>
      <link href="/2020/02/02/es6-zhi-yi-bu-chu-li-hui-gu-shi-jian-xun-huan/"/>
      <url>/2020/02/02/es6-zhi-yi-bu-chu-li-hui-gu-shi-jian-xun-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="事件循环小例子"><a href="#事件循环小例子" class="headerlink" title="事件循环小例子"></a>事件循环小例子</h1><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 例子1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span>答案： a  c  b<span class="token comment" spellcheck="true">// 例子2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>答案：a  <span class="token number">1000</span>个c  b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="【回顾】事件循环"><a href="#【回顾】事件循环" class="headerlink" title="【回顾】事件循环"></a>【回顾】事件循环</h1><p>JS运行的环境称之为宿主环境</p><p>执行栈：call、stack，一个数据结构，用于存放各种函数的执行环境，每一个函数执行之前，它的相关信息会加入到执行栈。函数调用之前，创建执行环境，然后加入得到执行栈；函数调用之后，销毁执行环境。</p><p>栈：<br><img src="333.png" alt=""></p><p>JS引擎永远执行的是执行栈的最顶部</p><p>异步函数：某些函数不会立即执行，需要等到某个时机到达后才会执行，这样的函数称之为异步函数。比如时间处理函数。异步函数的执行时机，会被宿主环境控制</p><p>异步函数过程：<br><img src="4444.png" alt=""></p><p>浏览器宿主环境中包含5个线程：</p><ol><li>JS引擎：负责执行执行栈的最顶部代码</li><li>GUI线程：负责渲染页面</li><li>时间监听线程： 负责监听各种事件</li><li>计时线程：负责计时</li><li>网络线程：负责网络通信</li></ol><p>当上面的线程发生了某些事情，如果该线程发现，这件事情有处理程序，它会将该处理程序加入一个叫做事件队列的内存。当JS引擎发现，执行栈中已经没用了任何内容后，会将事件队列中的第一个函数加入到执行栈中执行。</p><p>JS引擎对事件队列的取出执行方式，以及与宿主环境的配合，称之为事件循环。</p><p>事件队列在不同宿主环境汇总有所差异，大部分宿主环境会将事件队列进行细分。在浏览器中，事件队列分为两种：</p><ul><li>宏任务（队列）：macroTask，计时器结束的回调、事件回调、http回调等等绝大部分异步函数进入宏队列</li><li>微任务（队列）：MutationObserver，Promisee产生的回调进入微队列</li></ul><p>有宏任务和微任务：<br><img src="4444.png" alt=""></p><blockquote><p>MutationObserver用于监听某个DOM对象的变化</p></blockquote><p>当执行栈清空时，JS引擎首先会将微任务中的所有任务依次执行结束，如果没有微任务，则执行宏任务。</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//异步 放到宏队列</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"添加了一个li"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>， <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        li<span class="token punctuation">.</span>innerText <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//监听ul</span>    <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//异步 放到微队列</span>        <span class="token comment" spellcheck="true">//当监听的dom元素发生变化时运行的回调函数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ul元素发生了变化"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//监听ul</span>    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>ul<span class="token punctuation">,</span> <span class="token punctuation">{</span>        attributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//监听属性的变化</span>        childList<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//监听子元素的变化</span>        subtree<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//监听子树的变化</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ul元素发生了变化, 添加了一个li</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="事件和回调函数的缺陷"><a href="#事件和回调函数的缺陷" class="headerlink" title="事件和回调函数的缺陷"></a>事件和回调函数的缺陷</h1><p>我们习惯于使用传统的回调或事件处理来解决异步问题</p><p>事件：某个对象的属性是一个函数，当发生某一件事时，运行该函数</p><pre class="line-numbers language-js"><code class="language-js">dom<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>回调：运行某个函数以实现某个功能的时候，传入一个函数作为参数，当发生某件事的时候，会运行该函数。</p><pre class="line-numbers language-js"><code class="language-js">dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>本质上，事件和回调并没有本质的区别，只是把函数放置的位置不同而已。</p><p>一直以来，该模式都运作良好。</p><p>直到前端工程越来越复杂…</p><p>目前，该模式主要面临以下两个问题：</p><ol><li>回调地狱：某个异步操作需要等待之前的异步操作完成，无论用回调还是事件，都会陷入不断的嵌套</li><li>异步之间的联系：某个异步操作要等待多个异步操作的结果，对这种联系的处理，会让代码的复杂度剧增</li></ol><h1 id="缺陷例子"><a href="#缺陷例子" class="headerlink" title="缺陷例子"></a>缺陷例子</h1><p>1.按钮嵌套按钮  看起来不易阅读</p><p><img src="image-20200204102534659.png" alt=""></p><p>2.不断嵌套函数  代码冗余</p><p><img src="image-20200204103423210.png" alt=""></p><p>3.模拟ajax 嵌套请求</p><p><img src="image-20200204103608021.png" alt=""></p><p>4.异步之间的联系</p><p><img src="image-20200204104251010.png" alt=""></p><h1 id="异步处理的通用模型"><a href="#异步处理的通用模型" class="headerlink" title="异步处理的通用模型"></a>异步处理的通用模型</h1><p>ES官方参考了大量的异步场景，总结出了一套异步的通用模型，该模型可以覆盖几乎所有的异步场景，甚至是同步场景。</p><p>值得注意的是，为了兼容旧系统，ES6 并不打算抛弃掉过去的做法，只是基于该模型推出一个全新的 API，使用该API，会让异步处理更加的简洁优雅。</p><ol><li>ES6 将某一件可能发生异步操作的事情，分为两个阶段：<strong>unsettled</strong> 和 <strong>settled</strong></li></ol><p><img src="2019-10-18-17-28-30.png" alt=""></p><ul><li>unsettled： 未决阶段，表示事情还在进行前期的处理，并没有发生通向结果的那件事</li><li>settled：已决阶段，事情已经有了一个结果，不管这个结果是好是坏，整件事情无法逆转</li></ul><p>事情总是从 未决阶段 逐步发展到 已决阶段的。并且，未决阶段拥有控制何时通向已决阶段的能力。</p><ol start="2"><li>ES6将事情划分为三种状态： pending、resolved、rejected</li></ol><ul><li>pending: 挂起，处于未决阶段，则表示这件事情还在挂起（最终的结果还没出来）</li><li>resolved：已处理，已决阶段的一种状态，表示整件事情已经出现结果，并是一个可以按照正常逻辑进行下去的结果</li><li>rejected：已拒绝，已决阶段的一种状态，表示整件事情已经出现结果，并是一个无法按照正常逻辑进行下去的结果，通常用于表示有一个错误</li></ul><p>既然未决阶段有权力决定事情的走向，因此，未决阶段可以决定事情最终的状态！</p><p>我们将 把事情变为resolved状态的过程叫做：<strong>resolve</strong>，推向该状态时，可能会传递一些数据</p><p>我们将 把事情变为rejected状态的过程叫做：<strong>reject</strong>，推向该状态时，同样可能会传递一些数据，通常为错误信息</p><p><strong>无论是阶段，还是状态，是不可逆的！</strong></p><p><img src="2019-10-18-18-10-18.png" alt=""></p><ol start="3"><li>当事情达到已决阶段后，通常需要进行后续处理，不同的已决状态，决定了不同的后续处理。</li></ol><ul><li>resolved状态：这是一个正常的已决状态，后续处理表示为 thenable</li><li>rejected状态：这是一个非正常的已决状态，后续处理表示为 catchable</li></ul><p>后续处理可能有多个，因此会形成作业队列，这些后续处理会按照顺序，当状态到达后依次执行</p><p><img src="2019-10-18-18-10-38.png" alt=""></p><ol start="4"><li>整件事称之为Promise</li></ol><p><img src="2019-10-18-18-15-52.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之符号</title>
      <link href="/2020/02/01/es6-zhi-fu-hao/"/>
      <url>/2020/02/01/es6-zhi-fu-hao/</url>
      
        <content type="html"><![CDATA[<h1 id="普通符号"><a href="#普通符号" class="headerlink" title="普通符号"></a>普通符号</h1><p>符号是ES6新增的一个数据类型，它通过使用函数<code>Symbol(符号名)</code>来创建</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建一个符号</span><span class="token keyword">const</span> syb1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> syb2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>syb1<span class="token punctuation">,</span> syb2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> syb1 <span class="token operator">===</span> <span class="token string">"symbol"</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> syb2 <span class="token operator">===</span> <span class="token string">"symbol"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>符号设计的初衷，是为了给对象设置私有属性</p><p>符号具有以下特点：</p><ul><li>没有字面量</li><li>使用 typeof 得到的类型是 symbol</li><li><strong>每次调用 Symbol 函数得到的符号永远不相等，无论符号名是否相同</strong></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> syb1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> syb2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>syb1 <span class="token operator">===</span> syb2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>符号可以作为对象的属性名存在，这种属性称为符号属性 <pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建一个符号</span><span class="token keyword">const</span> syb1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"这是用于对象的一个属性"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 符号可以作为对象的属性来使用</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>syb1<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">//符号属性</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>console.log(obj)</p><pre><code>![](1234.png )    - 开发者可以通过精心的设计，让这些属性无法通过常规方式被外界访问```js// 用符号 外界就无法使用  对象const hero = (function() {    const getRandom = Symbol();    return {        attack: 30,        hp: 300,        defence: 10,        gongji() { //攻击            //伤害：攻击力*随机数（0.8~1.1）            const dmg = this.attack * this[getRandom](0.8, 1.1);            console.log(dmg);        },        [getRandom](min, max) {// 根据最小值和最大值产生一个随机数            return Math.random() * (max - min) + min;        }    }})()console.log(hero);hero[getRandom](3, 5); //会报错// 用类来实现const Hexo = (() =&gt; {    return class {        constructor(attack, hp, defence) {            this.attack = attack;            this.hp = hp;            this.defence = defence;        }        gongji() {            // 伤害：攻击力*随机数（0.8~1.1）            const dmg = this.attack * this[getRandom](0.8, 1.1);            console.log(dmg);        }        [getRandom](min, max) { // 根据最小值和最大值产生一个随机数            return Math.random() * (max - min) + min        }    }})();const h = new Hero(3, 6, 6)// 用非常规方法来获取到symbol方法const sybs = Object.getOwnPropertySymbols(Hero.prototype);const prop = sybs[0];console.log(h[prop](3, 5))</code></pre><p><img src="1111.png" alt=""></p><pre><code>- 符号属性是不能枚举的，因此在 for-in 循环中无法读取到符号属性，Object.keys 方法也无法读取到符号属性</code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// syb 无法通过枚举出来</span><span class="token keyword">const</span> syb <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>syb<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="4444.png" alt=""></p><pre><code>- Object.getOwnPropertyNames 尽管可以得到所有无法枚举的属性，但是仍然无法读取到符号属性- ES6 新增 Object.getOwnPropertySymbols 方法，可以读取符号</code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// syb 无法通过枚举出来</span><span class="token keyword">const</span> syb <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>syb<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["a", "b"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["a", "b"]</span><span class="token comment" spellcheck="true">// 得到的是一个符号属性的数组</span><span class="token keyword">const</span> sybs <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sybs<span class="token punctuation">,</span> sybs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> syb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [Symbol()] true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>符号无法被隐式转换，因此不能被用于数学运算，字符串拼接或其他隐式转换的场景，但符号可以显式转换为字符串，通过 String 构造函数进行转换即可，console.log 之所有可以输出符号，是它在内部进行了显式转换</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> syb <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>syb <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//会报错  符号不能运算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="共享符号"><a href="#共享符号" class="headerlink" title="共享符号"></a>共享符号</h1><p>根据摸个符号名称（符号描述）能够得到同一个符号</p><pre class="line-numbers language-js"><code class="language-js">Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">"符号名/符号描述"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获取共享符号</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> syb1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cosnt syb2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>syb1 <span class="token operator">===</span> syb2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>syb1<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token string">"b"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>syb2<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{a: 1, b:2, Symbol(abc): 3} {a: "a", b: "b", Symbol(abc): 3}</span><span class="token comment" spellcheck="true">//用共享符号可以访问</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 模拟symbol.for</span><span class="token keyword">const</span> SymbolFor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> global <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用于记录有哪些共享符号</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 如果global不存在 就创建  存在就直接使用已经存在的</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>global<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            global<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> global<span class="token punctuation">[</span>name<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> syb1 <span class="token operator">=</span> <span class="token function">SymbolFor</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token keyword">const</span> syb2 <span class="token operator">=</span> <span class="token function">SymbolFor</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>syb1 <span class="token operator">===</span> syb2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="知名（公共、具名）符号"><a href="#知名（公共、具名）符号" class="headerlink" title="知名（公共、具名）符号"></a>知名（公共、具名）符号</h1><p>知名符号是一些具有特殊含义的共享符号，通过Symbol的静态属性得到ES6延续了ES5的思想：减少魔法，暴露内部实现！</p><p>因此，ES6 用知名符号暴露了某些场景内部的实现</p><p>1.Symbol.hasInstance</p><p>该符号用于定义构造函数的静态成员，它将影响 instanceof 的判定</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//判断obj隐式原型上是否有属于A的</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token comment" spellcheck="true">// 等效于</span>A<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">,</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">]</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>[扩展] Symbol.isConcatSpreadable</li></ol><p>该知名符号会影响数组的concat方法</p><ol start="3"><li>[扩展] Symbol.toPrimitive</li></ol><p>该知名符号会影响类型转换的结果</p><ol start="4"><li>[扩展] Symbol.toStringTag</li></ol><p>该知名符号会影响 Object.prototype.toString 的返回值</p><ol start="5"><li>其他知名符号</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之解构</title>
      <link href="/2020/02/01/es6-zhi-jie-gou/"/>
      <url>/2020/02/01/es6-zhi-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h1><h2 id="什么是解构"><a href="#什么是解构" class="headerlink" title="什么是解构"></a>什么是解构</h2><p><strong>解构不会被解构的目标造成任何影响</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'kevin'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token punctuation">{</span>        province<span class="token punctuation">:</span> <span class="token string">'四川'</span><span class="token punctuation">,</span>        city<span class="token punctuation">:</span> <span class="token string">'成都'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 原来的写法</span><span class="token keyword">let</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> address<span class="token punctuation">;</span>name <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token punctuation">;</span>age <span class="token operator">=</span> user<span class="token punctuation">.</span>age<span class="token punctuation">;</span>sex <span class="token operator">=</span> user<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>address <span class="token operator">=</span> user<span class="token punctuation">.</span>address<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ES6解构</span><span class="token keyword">let</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> address<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> sex<span class="token punctuation">,</span> address<span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//要用小括号 让他们变为一个整体</span><span class="token comment" spellcheck="true">// 合并书写  先定义4个变量，然后从对象中读取同名属性，放到变量中</span><span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> address<span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用ES6的语法规则，将一个对象或数组的某个属性提取到某个变量中</p><h2 id="在解构中使用默认值"><a href="#在解构中使用默认值" class="headerlink" title="在解构中使用默认值"></a>在解构中使用默认值</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>同名变量 <span class="token operator">=</span> 默认值<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="非同名属性解构"><a href="#非同名属性解构" class="headerlink" title="非同名属性解构"></a>非同名属性解构</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>属性名<span class="token punctuation">:</span> 变量名<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'kevin'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token punctuation">{</span>        province<span class="token punctuation">:</span> <span class="token string">'四川'</span><span class="token punctuation">,</span>        city<span class="token punctuation">:</span> <span class="token string">'成都'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 解构出name，然后剩余的所有属性，放到一个新的对象中，变量名为obj</span><span class="token comment" spellcheck="true">// name: kevin</span><span class="token comment" spellcheck="true">// obj: {age: 11, sex: "男", address: {...}}</span><span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> <span class="token operator">...</span>obj<span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 先定义4个变量：name、age、gender、address</span><span class="token comment" spellcheck="true">// 再从对象user中读取同名属性赋值（其中gender读取的是sex属性）</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> address <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解构的比较深  解构出user中的name、province  </span><span class="token comment" spellcheck="true">// 这里的address不会当成是变量 会对address进行进一步解构</span><span class="token comment" spellcheck="true">// 定义两个变量name、province</span><span class="token comment" spellcheck="true">// 再解构</span><span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">{</span> province <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> address<span class="token punctuation">,</span> province<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 会报错 见下图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="error.png" alt=""></p><h1 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h1><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 单纯数组</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span>    <span class="token number">0</span><span class="token punctuation">:</span> n1<span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">:</span> n2<span class="token punctuation">}</span> <span class="token operator">=</span> numbers<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更加清新脱俗的写法</span><span class="token keyword">const</span> <span class="token punctuation">[</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>n1<span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> n4<span class="token punctuation">,</span> n5<span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//a d undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 数组包含数组的解构</span><span class="token keyword">const</span> numbers2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到numbers下标为4的数组汇总的下标为2的数据，放到变量中</span><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> n<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> numbersconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 数组包含对象的解构</span><span class="token keyword">const</span> numbers2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 得到numbers下标为4的数组属性a，赋值给变量a</span><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">{</span> a <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 换一种写法</span><span class="token keyword">const</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> A<span class="token punctuation">}</span> <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> nubmers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">345</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 得到数组前两项，分别放到变量a和b中，然后剩余的所有数据放到数组nums</span><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>nums<span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 交换变量</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2, 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 小例子</span><span class="token keyword">const</span> article <span class="token operator">=</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">"文章标题"</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> <span class="token string">"文章内容"</span><span class="token punctuation">,</span>    comments<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">"评论1"</span><span class="token punctuation">,</span>        user<span class="token punctuation">:</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'用户名1'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">"评论2"</span><span class="token punctuation">,</span>        user<span class="token punctuation">:</span> <span class="token punctuation">{</span>            id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>             name<span class="token punctuation">:</span> <span class="token string">"用户名2"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 解构出第二条评论的用户名和评论内容</span><span class="token comment" spellcheck="true">// name: "用户名2" content: "评论2"</span><span class="token keyword">const</span> <span class="token punctuation">{</span>    comments<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        content<span class="token punctuation">,</span>        user<span class="token punctuation">:</span> <span class="token punctuation">{</span>            name        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">=</span> article<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 评论2 用户名2</span><span class="token keyword">const</span> <span class="token punctuation">{</span>    content<span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">=</span> article<span class="token punctuation">.</span>comments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参数解构"><a href="#参数解构" class="headerlink" title="参数解构"></a>参数解构</h1><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// es5的写法</span><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`性别：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`身份：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>address<span class="token punctuation">.</span>province<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`城市：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token punctuation">.</span>address<span class="token punctuation">.</span>city<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es6的写法 用解构的方式来写</span><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token punctuation">{</span>    province<span class="token punctuation">,</span>    city<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`姓名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`年龄：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`性别：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`身份：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>province<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`城市：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>city<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"kevin"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token punctuation">{</span>        province<span class="token punctuation">:</span> <span class="token string">"四川"</span><span class="token punctuation">,</span>        city<span class="token punctuation">:</span> <span class="token string">"成都"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ajax中运用 旧的写法</span><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> defaultOptions <span class="token operator">=</span> <span class="token punctuation">{</span>        method<span class="token punctuation">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span> <span class="token string">"/"</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> opt <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>defaultOptions<span class="token punctuation">,</span>        <span class="token operator">...</span>options    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ajax中 运用解构的写法 把参数解构出来</span><span class="token comment" spellcheck="true">// {method = "get" ,url = "/"} = {}  给解构附上默认值 如果没传也不会报错</span><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    method <span class="token operator">=</span> <span class="token string">"get"</span><span class="token punctuation">,</span>    url <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">"/abc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之对象</title>
      <link href="/2020/01/31/es6-zhi-dui-xiang/"/>
      <url>/2020/01/31/es6-zhi-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="新增的对象字面量语法"><a href="#新增的对象字面量语法" class="headerlink" title="新增的对象字面量语法"></a>新增的对象字面量语法</h1><ol><li>成员速写</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原来写法</span><span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span>loginId<span class="token punctuation">,</span> loginPwd<span class="token punctuation">,</span> nickName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> sayHello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//这里不是写箭头函数  因为箭头函数里面没有this 而createUser中的this指向window 所以输出的只会是undefined</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"loginId"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loginId<span class="token punctuation">,</span> <span class="token string">"nickname"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nickName<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        loginId<span class="token punctuation">:</span> loginId<span class="token punctuation">,</span>        loginPwd<span class="token punctuation">:</span> loginPwd<span class="token punctuation">,</span>        nickName<span class="token punctuation">:</span> nickName<span class="token punctuation">,</span>        id<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//简写</span><span class="token keyword">function</span> <span class="token function">createUser</span><span class="token punctuation">(</span>loginId<span class="token punctuation">,</span> loginPwd<span class="token punctuation">,</span> nickName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        loginId<span class="token punctuation">,</span>        loginPwd<span class="token punctuation">,</span>        nickName<span class="token punctuation">,</span>        id<span class="token punctuation">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果对象字面量初始化时，成员的名称来自于一个变量</p><ol start="2"><li>方法速写</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//原来的写法</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"小满"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    sayHello<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>user<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法字面量</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"小满"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>user<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在对象字面量初始化时，方法可以省略冒号和</p><ol start="3"><li>计算属性名</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> prop1 <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">;</span><span class="token keyword">const</span> prop2 <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">;</span><span class="token keyword">const</span> prop3 <span class="token operator">=</span> <span class="token string">"sayHello"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原来的写法</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>user<span class="token punctuation">[</span>prop1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'小满'</span><span class="token comment" spellcheck="true">// ES6的写法</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>prop1<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'小满'</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>prop2<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>prop3<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>prop1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>prop2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>user<span class="token punctuation">[</span>prop3<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有的时候，初始化对象时，某些属性名可能来自于某个表达式的值，在ES6，可以使用中括号来标示该属性名是通过计算得到的。</p><h1 id="Object的新增API-Object是函数"><a href="#Object的新增API-Object是函数" class="headerlink" title="Object的新增API(Object是函数)"></a>Object的新增API(Object是函数)</h1><ol><li>Object.is</li></ol><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用于判断两个对象是否相等，基本上跟严格相等(===)是一致的，除了一下两点：</p><p>1) NaN和NaN相等<br>2) +0 和 -0不想等</p><ol start="2"><li>Object.assign</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">456</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token string">"abc"</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">789</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token string">"kkk"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1.用Object.assign</span><span class="token comment" spellcheck="true">//将obj2的数据，覆盖到obj1，并且会对obj1产生改动，然后返回obj1</span><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让obj1不被改动</span><span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> obj1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true 说明obj1被改动了</span><span class="token comment" spellcheck="true">// 2.用展开运算符 （更加推荐）</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>obj1<span class="token punctuation">,</span>    <span class="token operator">...</span>obj2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用于混合对象</p><ol start="3"><li>Object.getOwnPropertyNames 的枚举顺序（没什么用……）</li></ol><p>Object.getOwnPropertyNames方法在之前就存在，只不过，官方没有明确要求，对属性的顺序如何排序，如何排序，完全由浏览器厂商决定</p><p>ES6规定了该方法返回的数组的排序方法如下：</p><ul><li>先排数字，并按照升序排序</li><li>再排其他，按照书写顺序排序</li></ul><ol start="4"><li>Object.setPrototypeOf</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数用于设置某个对象的隐式原型(场景：不是构造函数但是又要修改原型)</p><p>比如：Object.setPrototypeOf(obj1, obj2);<br>相当于： <code>obj1.__proto__ = obj2</code></p><h1 id="面向对象简介"><a href="#面向对象简介" class="headerlink" title="面向对象简介"></a>面向对象简介</h1><p>面向对象：一种编程思想，跟具体的语言无关</p><p>对比面向过程:</p><ul><li>面向过程：思考的切入点是功能的步骤</li><li>面向对象：思考的切入点是对象的划分</li></ul><p>【大象装冰箱】</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//面向过程</span><span class="token comment" spellcheck="true">//1.冰箱门打开</span><span class="token keyword">function</span> <span class="token function">openFrige</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">openFrige</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 大象装进去</span><span class="token keyword">function</span> <span class="token function">elephantIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">elephantIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 冰箱门关上</span><span class="token keyword">function</span> <span class="token function">closeFrige</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">closeFrige</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//面向对象</span><span class="token comment" spellcheck="true">//大象</span><span class="token keyword">function</span> <span class="token function">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//冰箱</span><span class="token keyword">function</span> <span class="token function">Frige</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Frige<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>openDoor <span class="token operator">=</span> <span class="token function">fucntion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Frige<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>closeDoor <span class="token operator">=</span> <span class="token function">fucntion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Frige<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join <span class="token operator">=</span> <span class="token function">fucntion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//1. 冰箱门打开</span><span class="token keyword">var</span> frig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Frige</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frig<span class="token punctuation">.</span><span class="token function">openDoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 大象装进去</span><span class="token keyword">var</span> ele <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>frig<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3. 冰箱门关上</span>frig<span class="token punctuation">.</span><span class="token function">closeDoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类：-构造函数的语法糖"><a href="#类：-构造函数的语法糖" class="headerlink" title="类： 构造函数的语法糖"></a>类： 构造函数的语法糖</h1><h2 id="传统的构造函数的问题"><a href="#传统的构造函数的问题" class="headerlink" title="传统的构造函数的问题"></a>传统的构造函数的问题</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//面向对象中，将下面对一个对象的所有成员的定义，统称为类</span><span class="token comment" spellcheck="true">//构造函数 构造器</span><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//中间存在别的代码。n行  这样会照成低可读性</span><span class="token comment" spellcheck="true">//定义实例方法（原型方法）</span>Animal<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>print <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【种类】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【名称】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【性别】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"狗"</span><span class="token punctuation">,</span> <span class="token string">"旺财"</span><span class="token punctuation">,</span> <span class="token string">"公"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>属性和原型方法定义分离，降低了可读性</li><li>原型成员可以被枚举</li><li>默认情况下，构造函数仍然可以被当做普通函数使用</li></ol><h2 id="类的特点"><a href="#类的特点" class="headerlink" title="类的特点"></a>类的特点</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//ES6的类</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【种类】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【名称】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【性别】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"狗"</span><span class="token punctuation">,</span> <span class="token string">"旺财"</span><span class="token punctuation">,</span> <span class="token string">"公"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会自动把print放到原型上</span>a<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>类声明不会被提升，与let 和 const 一样，存在暂时性死区</li><li>类中的所有代码均在严格模式下执行</li><li>类的所有方法都是不可枚举的</li><li>类的所有方法都无法被当做构造函数使用  不能const p = new a.print(); 会报错</li><li>类的构造器必须使用 new 来调用</li></ol><h1 id="类的其他书写方式"><a href="#类的其他书写方式" class="headerlink" title="类的其他书写方式"></a>类的其他书写方式</h1><ol><li>可计算的成员名</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//ES6的类</span><span class="token keyword">const</span> printName <span class="token operator">=</span> <span class="token string">"print"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">[</span>printName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【种类】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【名称】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【性别】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"狗"</span><span class="token punctuation">,</span> <span class="token string">"旺财"</span><span class="token punctuation">,</span> <span class="token string">"公"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会自动把print放到原型上</span><span class="token comment" spellcheck="true">// 调用print方法</span>a<span class="token punctuation">[</span>printName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>getter 和 setter</li></ol><p>ES5 -&gt; Object.defineProperty可定义某个对象成员属性的读取和设置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//ES6的类</span><span class="token keyword">const</span> printName <span class="token operator">=</span> <span class="token string">"print"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ES5的写法 比较麻烦</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建一个age属性，并给它加上getter，读取该属性时，会运行该函数</span>    <span class="token comment" spellcheck="true">//如果只学get  只能读取不能赋值</span>    <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加下划线的原因  不希望外界直接访问</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">+</span> <span class="token string">'岁'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建一个age属性，并给它加上setter，给该属性赋值时，会运行该函数</span>    <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> age <span class="token operator">!==</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"age property must be a number"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            age <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"狗"</span><span class="token punctuation">,</span> <span class="token string">"旺财"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"公"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会自动把print放到原型上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用getter和setter控制的属性，不在原型上</p><ol start="3"><li>静态成员</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//ES6的类</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例成员</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实例方法</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【种类】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【名称】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`【性别】: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 静态成员</span>Animal<span class="token punctuation">.</span>abc <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"狗"</span><span class="token punctuation">,</span> <span class="token string">"旺财"</span><span class="token punctuation">,</span> <span class="token string">"公"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会自动把print放到原型上</span>a<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="static.png" alt=""></p><p>构造函数本身的成员()</p><p>使用static关键字定义的成员即静态成员</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Chess</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态属性</span>    <span class="token keyword">static</span> width <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> height <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//静态方法</span>    <span class="token keyword">static</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Chess<span class="token punctuation">.</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Chess<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用静态方法</span>Chess<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>字段初始化器（ES7）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//对于一些成员 本身就有默认值 就可以用字段初始化器</span> <span class="token keyword">static</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 字段初始化器相当于在constructor</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>注意：</p><p>1). 使用static的字段初始化器，添加的是静态成员<br>2). 没有使用static的字段初始化器，添加的成员位于对象上<br>3). 箭头函数在字段初始化器位置上指向当前对象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    print <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 会占用额外的内存空间。因为每次创建对象  都会给这个对象上加入print</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>print <span class="token operator">===</span> t2<span class="token punctuation">.</span>print<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>类表达式</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//匿名类 类表达式</span>    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字段初始化器</span>    b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//字段初始化器</span><span class="token punctuation">}</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h1><p>如果两个类A和B，如果可以描述为：B 是 A，则，A和B形成继承关系</p><p>如果B是A，则：</p><ol><li>B继承自A</li><li>A派生B</li><li>B是A的子类</li><li>A是B的父类</li></ol><p>如果A是B的父类，则B会自动拥有A中的所有实例成员。</p><ul><li><p>原来的写法<br><img src="jicheng.png" alt=""></p></li><li><p>ES6的写法</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 一般父类 不能通过该类来创建对象</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> Animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeScript</span><span class="token punctuation">(</span><span class="token string">'你不能直接创建Animal的对象，应该通过子类创建'</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`[种类]：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`[名字]：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`[年龄]：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`[性别]：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Dog继承自Animal</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"犬类"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//子类特有的属性</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>loves <span class="token operator">=</span> <span class="token string">"吃骨头"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//调用父类的print </span>     <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//自己特有的代码 </span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`[爱好]: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>loves<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>新的关键字：</p><ul><li>extends：继承、用于类的定义</li><li>super<ul><li>直接当作函数调用，表示父类构造函数</li><li>如果当作对象使用，则表示父类的原型</li></ul></li></ul><p>注意：ES6要求，如果定义了constructor，并且该类是子类，则必须在constructor的第一行手动调用父类的构造函数<br><img src="error.png" alt=""></p><p>如果子类不写constructor，则会有默认的构造器，该构造器需要的参数和父类一致，并且自动调用父类构造器</p><p><strong>注意</strong><br>正常情况下，this的指向，this始终指向具体的类的对象</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之函数</title>
      <link href="/2020/01/30/es6-zhi-han-shu/"/>
      <url>/2020/01/30/es6-zhi-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//14</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在书写形参时，直接给形参赋值，赋的值为默认值</p><p>这样一来，当调用函数时，如果没有给对应的参数赋值</p><h2 id="【扩展】对arguments的影响"><a href="#【扩展】对arguments的影响" class="headerlink" title="【扩展】对arguments的影响"></a>【扩展】对arguments的影响</h2><p>只要给函数加上函数默认值，该函数会自动变成严格模式下的规则：arguments和形参脱离（尽量不要使用arguments）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//非严格模式</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arugments"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1, 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a:"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"b:"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1, 2</span>    a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arugments"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3, 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a:"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"b:"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3, 2</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给函数默认值 会自动转化为严格模式</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arugments"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1, 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a:"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"b:"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//1, 2</span>    a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"arugments"</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1, 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a:"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">"b:"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3, 2</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="【扩展】留意暂时性死区"><a href="#【扩展】留意暂时性死区" class="headerlink" title="【扩展】留意暂时性死区"></a>【扩展】留意暂时性死区</h2><p>形参和ES6中的let或const声明一样，具有作用域，并且根据参数的声明顺序，有暂时性死区</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//原来的求和使用arguments</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>arguments的缺陷：</p><ol><li>如果形参配合使用，容易导致混乱</li><li>从语义上，使用arguments获取参数，由于形参缺失，</li></ol><p>ES6的剩余参数专门用于收集末尾的所有参数，将其放置到形参数组中</p><p>语法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>形参名<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>细节：</strong></p><ol><li>一个函数，仅能出现一个剩余参数</li><li>一个函数，如果有剩余参数，剩余参数必须是最后一个参数</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//args收集了所有的参数，形参的一个数组</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+</span><span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><p>使用方式：<code>...要展开的东西</code></p><h2 id="对数组展开-ES6"><a href="#对数组展开-ES6" class="headerlink" title="对数组展开 ES6"></a>对数组展开 ES6</h2><h2 id="对对象展开-ES7"><a href="#对对象展开-ES7" class="headerlink" title="对对象展开 ES7"></a>对对象展开 ES7</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getRandomNumbers</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">getRandomNumbers</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//讲数组的每一项展开，依次作为参数传递，而不是把整个数组作为一个参数传递</span><span class="token comment" spellcheck="true">//sum(numbers)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//相当于传递了10个参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 对数组展开</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//克隆arr1数组到arr2</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span> arr1<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">,</span> arr1 <span class="token operator">===</span> arr2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[3, 67, 8 5] false</span><span class="token comment" spellcheck="true">// 对对象展开</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'小满'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    sex<span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token punctuation">{</span>        country<span class="token punctuation">:</span> <span class="token string">'中国'</span><span class="token punctuation">,</span>        province<span class="token punctuation">:</span> <span class="token string">'福建'</span><span class="token punctuation">,</span>        city<span class="token punctuation">:</span> <span class="token string">'福州'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//浅克隆   obj1.address === obj2.address  true 改变obj1的address同事obj2也会改变</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>obj1<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'球球'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 转换</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>obj1<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'球球'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>obj1<span class="token punctuation">.</span>address    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="明确函数的双重用途"><a href="#明确函数的双重用途" class="headerlink" title="明确函数的双重用途"></a>明确函数的双重用途</h1><p>ES6提供了一个特殊的API，可以使用该API在函数内部，判断该函数是否使用了new来调用</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span><span class="token punctuation">.</span>target  <span class="token comment" spellcheck="true">//该表达式，得到的是：如果没有使用new来调用函数，则返回undefined</span><span class="token comment" spellcheck="true">//如果使用new调用函数，则得到的是new关键字后面的函数本身</span><span class="token comment" spellcheck="true">//一般用于内部协作比较频繁的系统，构造函数担心别人使用不对 而进行判定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"洪"</span><span class="token punctuation">,</span> <span class="token string">"梦"</span><span class="token punctuation">)</span>；console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Person{}  </span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"洪"</span><span class="token punctuation">,</span> <span class="token string">"梦"</span><span class="token punctuation">)</span>；console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefine  原因：不是构造函数 导致this是指向window的 所以不存在Person</span><span class="token comment" spellcheck="true">// 优化Person</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断是否是使用new的方式来调整函数</span>    <span class="token comment" spellcheck="true">//过去的判断方式  用this指向来判断  但是Person.call(new Person(), '洪', '梦') 这样的话就会绕开</span>    <span class="token comment" spellcheck="true">// if(!(this instanceof Person)) {</span>    <span class="token comment" spellcheck="true">//     throw new Error("该函数没有使用new来调用")</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// ES6的方法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"该函数没有使用new来调用"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>回顾：this指向</p><ol><li>通过对象调用函数，this指向对象</li><li>直接调用函数，this指向全局对象</li><li>如果通过new调用函数，this指向新创建的对象</li><li>如果通过apply、call、bind调用函数，this指向指定的数据</li><li>如果是DOM事件函数，this指向事件源</li></ol><h2 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h2><p>箭头函数是一个函数表达式，理论上，任何使用函数表达式的场景都可以使用箭头函数</p><p>完整语法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span>参数<span class="token number">1</span>， 参数<span class="token number">2</span>， <span class="token operator">...</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//函数体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果参数只有一个，可以省略小括号</p><pre class="line-numbers language-js"><code class="language-js">参数 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果箭头函数只有一条返回语句，可以省略大括号和return关键字</p><pre class="line-numbers language-js"><code class="language-js">参数 <span class="token operator">=</span><span class="token operator">></span> 返回值<span class="token keyword">const</span> isOdd <span class="token operator">=</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 简写 返回表达式</span><span class="token keyword">const</span> isOdd <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 简写 返回对象</span><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span> a<span class="token punctuation">,</span>    b<span class="token punctuation">:</span> b<span class="token punctuation">,</span>    sum<span class="token punctuation">:</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 原来的函数</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    start<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//this -> obj</span>        <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//setInterval 里面的this是指向window  </span>            _this<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    regEvent<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span>count<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">regEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用箭头函数</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    start<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//用箭头函数就不用var _this = this; 这一步</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    regEvent<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">regEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h2><ul><li>箭头函数的函数体中的this，取决于箭头函数定义的位置的this指向，而与如何调用箭头函数无关</li><li>箭头函数中，没有自己的this、arguments、new.target,如果使用了 则使用的是函数外层对应的this、arguments、new.target</li><li>箭头函数没有原型</li><li>箭头函数不能作用于构造函数使用</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//window</span><span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    method<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//得到外面函数的arguments</span>        <span class="token punctuation">}</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>obj<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//obj arguments[234]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li><p>临时性使用的函数，并不会刻意调用</p><ol><li>事件处理函数</li><li>异步处理函数  setInterval setTimeout </li><li>其他临时性的函数 </li></ol></li><li><p>为了绑定外层this的函数</p></li><li><p>在不影响其他代码的情况下，保持代码的简洁，最常见的就是，数组方法中的回调函数</p></li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">345</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>num <span class="token operator">=</span><span class="token operator">></span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>num <span class="token operator">=</span><span class="token operator">></span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之字符串和正则表达式</title>
      <link href="/2020/01/30/es6-zhi-zi-fu-chuan-he-zheng-ze-biao-da-shi/"/>
      <url>/2020/01/30/es6-zhi-zi-fu-chuan-he-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="更好的Unicode支持"><a href="#更好的Unicode支持" class="headerlink" title="更好的Unicode支持"></a>更好的Unicode支持</h1><p>早期，由于存储空间宝贵，Unicode使用16进制来存储文字。我们将一个16位的二进制编码叫做码元(Code Unit).</p><p>2^16 = 65536  对于全世界的存储来说  是不够的。</p><p>后来，由于技术的发展，Unicode对文字编码进行扩展，将某些文字扩展到了32位(占用两个码元)，并且，讲某个文字对应的二进制数字叫做码点（Code Point）。</p><p>2^32 = 429296729 目前够用  有的文字一个码点需要占用两个码元  有的文字的一个码点只占用一个码元</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">"𠮷"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//字符串是根据码元来取的  这个字占用了两个码元（32位）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"字符串长度："</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">//正则是用码元来匹配的 不是用码点来匹配的  所以占两个码元</span><span class="token comment" spellcheck="true">//正则中^代表开头 .代表容易单个字符串 $代表结尾</span><span class="token comment" spellcheck="true">//为false 因为吉这个字是由一个码点 两个码元组成 而正则是根据码元来匹配 但是码元有两个。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"使用正则测试："</span><span class="token punctuation">,</span> <span class="token regex">/^.$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 以前的方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"得到第一个码元"</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"得到第二个码元"</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//ES6为了解决这个困扰，为字符串提供了方法： codePointAt, 根据字符串码元的位置得到</span><span class="token comment" spellcheck="true">//𠮷: \ud842\udfb7</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"得到第一个码点："</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//𠮷 这个字可以拆分为 \ud842 和 \udfb7  如果算第二个码点 就算\udfb7 </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"得到第二个码点："</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断文字是32位还是16位</span><span class="token keyword">function</span> <span class="token function">is32bit</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断这个码点是否大于16位的最大值 如果大于 则其是32位</span>    <span class="token keyword">return</span> char<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0xffff</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 得到字符串码点的真实长度</span><span class="token keyword">function</span> <span class="token function">getLengthOfCodePoint</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// i在索引码元</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is32bit</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当前字符串在i这个位置，占用两个码元</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"𠮷是否是32位的"</span><span class="token punctuation">,</span> <span class="token function">is32bit</span><span class="token punctuation">(</span><span class="token string">"𠮷"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//同时，ES6为正则添加了一个flag：u，如果添加了该配置，则匹配时，使用码点匹配</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"使用正则测试："</span><span class="token punctuation">,</span> <span class="token regex">/^.$/u</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="更多的字符串API"><a href="#更多的字符串API" class="headerlink" title="更多的字符串API"></a>更多的字符串API</h1><p>以下均为字符串的实例方法（原型上的方法）</p><ul><li>includes  判断一个字符串中是否包含指定的子字符串</li><li>startsWith  判断字符串中是否以指定的字符串开始</li><li>endsWith  判断字符串中是否以指定的字符串结尾</li><li>repeat  将字符串重复指定的次数，然后返回一个新字符串</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//判断是否包含狠字</span><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">"是个狠人"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从字符串下标为0的开始查找</span><span class="token keyword">const</span> result <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'狠'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从字符串下标为3的开始查找</span><span class="token keyword">const</span> result <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'狠'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"是否包含“狠”"</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"狠"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"是否以“是”开头"</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"是"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"是否以“人”结尾"</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"人"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"重复4次"</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="正则中的粘连标记"><a href="#正则中的粘连标记" class="headerlink" title="正则中的粘连标记"></a>正则中的粘连标记</h1><p>标记名：y</p><p>含义：匹配时，完全按照正则对象中的lastIndex位置开始匹配，并且匹配的位置必须在lastIndex位置</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">"Hello World!!!"</span><span class="token punctuation">;</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/W\w+/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//以W字符开头+任意的单词字符一次或多次</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">// 如果加上y 表示粘连关系 根据lastIndex来判断。因为lastIndex为3，匹配所以为true lastIndex默认为0</span><span class="token keyword">const</span> regY <span class="token operator">=</span> <span class="token regex">/W\w+/y</span><span class="token punctuation">;</span>regY<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"reg.lastIndex:"</span><span class="token punctuation">,</span> reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p>ES6之前处理字符串繁琐的两个方面</p><ol><li>多行字符串</li><li>字符串拼接</li></ol><p>ES6中，提供了模板字符串的书写，可以非常方便的换行和拼接，要做的仅仅是将字符串的开始或结尾改为`符号</p><p>如果要在字符串中拼接js表达式，只需要在模板字符串中使用<code>${}</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 以前处理方式 要用\n来换行 或者加斜杆换行</span><span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token string">"好好学习\n天天向上"</span><span class="token keyword">var</span> text1 <span class="token operator">=</span> <span class="token string">"好好学习\                    天天向上"</span><span class="token keyword">var</span> text2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'好好学习'</span><span class="token punctuation">,</span> <span class="token string">'天天向上'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 模板字符串</span><span class="token keyword">var</span> newText <span class="token operator">=</span>  <span class="token template-string"><span class="token string">`好好学习天天向上`</span></span><span class="token comment" spellcheck="true">// 模板字符串拼接</span><span class="token keyword">var</span> condition <span class="token operator">=</span> <span class="token string">'废寝忘食'</span><span class="token keyword">var</span> newText <span class="token operator">=</span>  <span class="token template-string"><span class="token string">`好好学习</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>condition<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">天天向上,表达式可以是任何有意义的数据</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">0.5</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">表达式是可以嵌套的${`</span></span>表达式中的模板字符串<span class="token template-string"><span class="token string">`}`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="模板字符串的标记"><a href="#模板字符串的标记" class="headerlink" title="模板字符串的标记"></a>模板字符串的标记</h1><p>在模板字符串书写之前，可以加上标记：</p><pre class="line-numbers language-js"><code class="language-js">标记名<span class="token template-string"><span class="token string">`模板字符串`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> newTextTag <span class="token operator">=</span>  myTag<span class="token template-string"><span class="token string">`好好学习</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>condition<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">天天向上, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>condition<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">。`</span></span><span class="token comment" spellcheck="true">//相当于  newTextTag = myTag(['好好学习', '天天向上', '。'], '废寝忘食', '废寝忘食')</span><span class="token comment" spellcheck="true">//实现模板字符串拼接</span><span class="token keyword">function</span> <span class="token function">myTag</span><span class="token punctuation">(</span>parts<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> values <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        str <span class="token operator">+</span><span class="token operator">=</span> parts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> values<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str <span class="token operator">+</span><span class="token operator">=</span> parts<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newTextTag<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//好好学习废寝忘食天天向上，废寝忘食。</span><span class="token comment" spellcheck="true">//String.raw 把转义字符变成字符串</span><span class="token keyword">var</span> text <span class="token operator">=</span> String<span class="token punctuation">.</span>raw<span class="token template-string"><span class="token string">`abc\nbcd`</span></span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//abc\nbcd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标记是一个函数，函数参数如下：</p><ol><li>参数1： 被插值分割的字符串数组</li><li>后续参数：所有的插值</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结之新年寄语</title>
      <link href="/2020/01/24/zong-jie-zhi-xin-nian-ji-yu/"/>
      <url>/2020/01/24/zong-jie-zhi-xin-nian-ji-yu/</url>
      
        <content type="html"><![CDATA[<p>今天是除夕，也算2020年新的开端。在1月1日，写下20年展望，回想这20几天。</p><blockquote><p>在工作上</p></blockquote><p>磕磕碰碰写完轿车托运。但是写的代码冗余度很高，uniapp的方法没有理解透，遇到问题，还是茫然无措，代码风格不是很好。依旧很粗心。尤其是bug一多，pm催的时候，出错率更高。希望新的一年，遇到事情不慌，做事情再三检查再提交，轿车托运尽自己所能，最大程度优化</p><blockquote><p>在学习上</p></blockquote><p>英语单词断过两次，一次在松懈过程中断掉，还有一次公司尾牙玩的太欢忘记了，英语在工作中同等重要，加强英语学习。在前端学习中，本来预计在年前学完es6，但是因为上班时间工作完不成导致经常回来加班，学习计划一拖再拖，导致现在还没完成。希望新的一年，工作归工作，学习归学习。紧跟计划来，学完之前买的课程，把基础打扎实，不给被人添乱。</p><blockquote><p>在生活上</p></blockquote><p>多出去社交，运动。好好攒比钱学习兴趣。在这次尾牙活动中，不善于表达自己的想法，导致狼人杀中，我一直只是那句话。在ktv中因为唱歌会跑掉，而不敢去唱。一直处于自己的舒适区，所以今年打算突破自己，等转正去学习街舞，让自己变得更加自信，也算是新的开始吧。</p><p>总的来说，新的一年，我要好好加油！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之let和const</title>
      <link href="/2020/01/15/es6-zhi-let-he-const/"/>
      <url>/2020/01/15/es6-zhi-let-he-const/</url>
      
        <content type="html"><![CDATA[<p>let的用法和var差不多，但是又和var不相同。let是为了弥补var的设计不足。var中只有全局作用域和局部作用域。在if和for中声明的也都是全局作用域，只有函数中声明会变成局部作用域。而let就有块级作用域，只要被大括号包裹就是块级作用域。</p><h2 id="一-使用let声明变量"><a href="#一-使用let声明变量" class="headerlink" title="一.使用let声明变量"></a>一.使用let声明变量</h2><ul><li><p>let声明的变量不会挂载到全局对象</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"divButtons"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  button<span class="token punctuation">.</span>innerHtml <span class="token operator">=</span> <span class="token string">"按钮"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>  button<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//使用的是当前作用域的i</span>  <span class="token punctuation">}</span>  div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在循环中，用let声明的循环变量，会特殊处理，每次进入循环体，都会开启一个新的作用域，并将循环变量绑定到该作用域（每次循环使用的都是新的循环变量）</p></li><li><p>let声明变量，不允许当前作用域范围内重复声明</p></li><li><p>使用let不会有变量提升，因此，不能在定义let之前使用。会造成暂时性死区。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//报错  因为暂时性死区</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="二-使用const声明变量"><a href="#二-使用const声明变量" class="headerlink" title="二.使用const声明变量"></a>二.使用const声明变量</h2><p>const和let特性一样，但是const是用来声明常量的，const声明的常量的值不能改变。</p><ul><li><p>变量不可变，是指声明的常量的内存空间不可变，并不保证内存空间中的地址指向的其他空间不可变</p></li><li><p>变量的命名</p><ul><li><p>特殊的常量：该常量从字面意义上，一定是不可变的，比如圆周率,月地距离这样不可能变化的值。这种常量的名称都要使用大写</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token keyword">const</span> MOONESRTHDISTANCE <span class="token operator">=</span> <span class="token number">111111</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>普通常量正常命名即可</p></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探闭包</title>
      <link href="/2020/01/14/chu-tan-bi-bao/"/>
      <url>/2020/01/14/chu-tan-bi-bao/</url>
      
        <content type="html"><![CDATA[<h2 id="一-闭包产生的原因"><a href="#一-闭包产生的原因" class="headerlink" title="一.闭包产生的原因"></a>一.闭包产生的原因</h2><blockquote><p>当内部函数被保存到外部时，将会生成闭包。闭包会导致原有的作用域链不释放，造成内存泄露</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> a <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">var</span> bbb <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">var</span> aaa <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">var</span> glob <span class="token operator">=</span> <span class="token number">100</span>； <span class="token keyword">var</span> demo <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图<br><img src="image-20200114211612972.png" alt="image-20200114211612972"><br>return b是把b保存到外部了。当a执行完砍掉自己的执行期上下文，b仍然可以访问a的执行期上下文。只要是内部的函数被保存到外部，就一定会产生闭包。</p><h2 id="二-闭包的作用"><a href="#二-闭包的作用" class="headerlink" title="二.闭包的作用"></a>二.闭包的作用</h2><ul><li>1.实现公有变量</li><li>2.可以做缓存(存储结构)</li><li>3.可以实现属性私有化</li><li>4.模块开发，防止污染全局变量</li></ul><ol><li><p>实现公有变量</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> count <span class="token operator">++</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> demo<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> conter <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次调用counter就会在原有的基础上加一次，count作为他们的公有变量</p></li><li><p>可以做缓存</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> num <span class="token operator">++</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> num <span class="token operator">--</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> myArr <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//101</span>myArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>函数a和函数b共用test的执行期上下文，所以num相当于在缓存中。a中的num++和b中的num–相当于从缓存中取。所以num是同一个。</p><p>4.模块开发，防止污染全局变量</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"GlobalName"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局变量</span><span class="token keyword">var</span> init <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"initName"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印name</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//形成接口</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// --> initName</span><span class="token keyword">var</span> initSuper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"initSuperName"</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印name</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">callName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//形成接口</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initSuper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// --> initSuperName</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在执行init( )和initSuper( )时打印的name值互不影响</p><h2 id="三-闭包和匿名函数的区别"><a href="#三-闭包和匿名函数的区别" class="headerlink" title="三. 闭包和匿名函数的区别"></a>三. 闭包和匿名函数的区别</h2><ul><li>匿名函数：没有函数名称的函数。当函数执行完之后，执行期上下文会被销毁，内存中仅保存全局作用域。</li><li>闭包：一个可以使用另外一个函数作用域中的变量的函数。执行期上下文不会被销毁，仍然保存在内存中</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记之js的缺点</title>
      <link href="/2020/01/13/bi-ji-zhi-es6/"/>
      <url>/2020/01/13/bi-ji-zhi-es6/</url>
      
        <content type="html"><![CDATA[<h2 id="JS的缺点"><a href="#JS的缺点" class="headerlink" title="JS的缺点"></a>JS的缺点</h2><ul><li>允许重复的变量声明：导致数据被覆盖<blockquote><p>var a = 1;<br>function print() {<br>console.log(a)<br>}<br>//假设有n行代码<br>var a = 2;<br>print()</p><p>a = 2 会覆盖 a = 1 由于js这种事弱语言，变量重复不会报错，导致代码量一旦增加，就容易出现问题。而且这种问题很难发现。</p></blockquote></li><li>变量提升：怪异的数据访问、闭包问题<blockquote><ul><li>1.变量提升：怪异的数据访问<br>if(Math.random() &lt; 0.5&gt;) {<br>var a = “abc”;<br>console.log(a);<br>}else {<br>console.log(a);<br>}<br>console.log(a);<br>代码的字面意思：<br>如果随机数小于0.5，则声明变量a，赋值为abc，输出a<br>如果随机数不小于0.5，则输出a</li></ul><p>但是js在开始运行之前会进行变量提升，导致这段代码的意思变为<br>先声明一个变量a<br>如果随机数小于0.5，赋值为abc，输出a<br>否则,输出a<br>由此可见 js的变量提升会让数据访问变怪异</p><ul><li>2.变量提升，闭包<br>点击每一个按钮都只会输出11  原因是var i提升到全局，又因为js有变量提升以及预编译，导致循环的每一个i都是全局的这个i，预编译让i提前编译成11，所以导致不管点击哪个按钮都只会输出11。<br>var div = document.getElementById(“divButtons”);<br>for(var i = 1; i &lt;= 10; i ++) {<br>var btn = document.createElement(“button”);<br>btn.innerHTML = “按钮” + i;<br>div.appendChild(btn);<br>btn.onclick=function() {<br>console.log(i);<br>}<br>}</li></ul><p>js中解决闭包 使用立即执行函数<br>var div = document.getElementById(“divButtons”);<br>for(var i = 1; i &lt;= 10; i ++) {<br>var btn = document.createElement(“button”);<br>btn.innerHTML = “按钮” + i;<br>div.appendChild(btn);<br>(function(i) {<br>btn.onclick=function() {<br>console.log(i);<br>}<br>})<br>}</p></blockquote></li><li>全局变量挂载到全局对象：全局对象成员污染问题<blockquote><p>如果在全局定义变量，最后会归属于window。如果该变量和window中的变量相同，则会覆盖window中的变量，造成严重的错误。</p></blockquote></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> ES6笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp入坑记</title>
      <link href="/2020/01/08/uniapp-ru-keng-ji/"/>
      <url>/2020/01/08/uniapp-ru-keng-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一-简短介绍"><a href="#一-简短介绍" class="headerlink" title="一.简短介绍"></a>一.简短介绍</h2><p>uniapp以一套代码8端共用，让这个框架火起来。使用这个框架编写的代码，可发布到iOS、Android、H5、以及各种小程序等多个平台</p><blockquote><p>官方展示效果二维码</p></blockquote><p><img src="B6AD7281-A764-4CD8-BD20-E5CCB319DA82.png" alt=""></p><h2 id="二-项目搭建"><a href="#二-项目搭建" class="headerlink" title="二.项目搭建"></a>二.项目搭建</h2><blockquote><p>所需开发工具<br><img src="83C6BD99-3D80-4767-ACDF-320A80C877F4.png" alt=""></p></blockquote><p>1.创建uniapp的项目</p><blockquote><p>文件 -&gt;  新建 -&gt; 项目</p></blockquote><p><img src="4FEB1A23-DC73-47B8-918D-11FD64A4C6AF.png" alt=""></p><p><img src="D74D1B7A-0908-4566-A01F-9F2741C4961B.png" alt=""></p><p>其中项目类型分为：</p><ul><li>普通项目： 创建vue项目</li><li>uni-app(U)：创建uni-app 可以实现发布到多端</li><li>Wap2App(P):  wap2app 是一个将现有M站（也称手机wap站，区别于pc的web站）快速发布成 App 的增强方案。具有原生功能的体验。</li><li>5+App(A):  HTML5 Plus移动App，简称5+App，这类App可以调用手机的原生能力，实现与原生App同样强大的功能和性能</li><li>小程序(M): </li><li>快应用:</li></ul><p>2.创建完成显示目录结构</p><p><img src="C61A345D-404D-443C-87EA-31D25442CE05.png" alt=""></p><p>3.初始化文件内容细说</p><ul><li><p>index.vue   和vue项目一样 初始化的格式都是这样  都是uniapp运用的标签大体上有 view、image、text<br><img src="91D0490C-5A25-49E1-8187-FB9BA5F37EE3.png" alt=""></p></li><li><p>App.vue<br><img src="DEB56654-BE0D-42E9-A0B6-166E1EBDD5DA.png" alt=""></p></li><li><p>pages.json<br><img src="D50C2A34-91D5-4385-988E-6DB1BA902EEB.png" alt=""></p></li></ul><h2 id="三-项目调试"><a href="#三-项目调试" class="headerlink" title="三.项目调试"></a>三.项目调试</h2><p>1.浏览器调试  浏览器调试又分为Chrome、Firefox、IE等 使用浏览器调试需要配置浏览器所在路径</p><p><img src="0FE028EE-F3AD-4089-8F3D-77F213B20517.png" alt=""></p><ul><li>浏览器配置  运行-&gt;运行到浏览器-&gt; 配置web服务器 </li></ul><p><img src="F17B6B17-7109-40D1-B36D-48862D5BFAB8.png" alt=""></p><p>2.小程序运行  运行-&gt;运行到浏览器-&gt; 配置web服务器  小程序运行配置</p><p><img src="976E0D55-D8FC-4E2A-8DED-9CEE5C2062CC.png" alt=""></p><p>小程序运行中微信小程序注意事项：</p><ul><li>首次运行会出现微信小程序访问被拒<br><img src="AABC13D4-78BE-475F-ABF7-86D147A81222.png" alt=""></li></ul><p>解决  打开微信小程序   设置-&gt;通用-&gt;安全   开启服务端口<br><img src="D74D1B7A-0908-4566-A01F-9F2741C4961B.png" alt=""></p><h2 id="四-uniapp中-h5项目打包"><a href="#四-uniapp中-h5项目打包" class="headerlink" title="四.uniapp中 h5项目打包"></a>四.uniapp中 h5项目打包</h2><p>1.点开发行 -&gt; 网站-H5手机版</p><p><img src="28E0110B-B015-49C8-88F3-1813937E2093.png" alt=""></p><p>2.填写网站和域名 </p><p><img src="CD99DFDD-D795-4AA9-B1D7-D83B5C6AA845.png" alt=""></p><p>3.在manifest.json -&gt;  h5配置   -&gt;  运行的基础路径</p><p><img src="63FB4B20-408E-494B-857E-8F8C40CCEAB0.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> uniapp初体验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>展望20</title>
      <link href="/2020/01/01/zhan-wang-20/"/>
      <url>/2020/01/01/zhan-wang-20/</url>
      
        <content type="html"><![CDATA[<p>回望19，经历实习毕业设计论文的摧残后，在家歇业自学前端。终于赶在19的小尾巴找了份工作。第一次接触项目，一脸懵逼，问同事, 查百度，终于捋清楚。首先，开始项目前，要先排期，排期要和UI和后端相呼应。其次，开始搭建项目整体框架，要接口的假数据。最后联调。环环相扣，缺一不可。</p><p>​    20的第一天，立个flag，下班回家好好学犀牛并且总结一天工作收获。</p><p>​    </p><p>​    </p><p>​    </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 展望 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
